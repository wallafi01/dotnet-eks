name: CICD
on: 
  workflow_call:
    inputs:
        environment:
            type: string
            required: true
            description: 'Nome ambiente'
        deploy_path:
            type: string
            required: true
            description: 'Caminho do arquivo de deployment'            
    
jobs:
  build-and-deploy:
    runs-on: [ ubuntu-latest ]
    environment: ${{ inputs.environment }}    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4.1.5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECRs
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: ${{ vars.REPOSITORY }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./BookManager/Dockerfile .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    
         
      - name: Set up cache for Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin


      - name: Run Trivy vulnerability scanner
        env:
          IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/${{ vars.REPOSITORY }}:${{ github.sha }}
        run: |
          trivy image --severity CRITICAL,HIGH --ignore-unfixed  --cache-dir ~/.cache/trivy $IMAGE_NAME 
          
      - name: Checkout source
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0          
  
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'
  
      - name: Install Sonar Scanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner
  
      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
  
      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          PROJECT_NAME: ${{ vars.PROJECT_NAME}}
        run: |
          dotnet sonarscanner begin /k:"$PROJECT_NAME" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.scanner.scanAll=false
          dotnet build  # Build the project for analysis
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"  

      - name: Update kube config
        env:
          EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region us-east-1
    
      - name: Deploy to EKS
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
           IMAGE_TAG: ${{ steps.commit.outputs.short }}
           REPOSITORY: ${{ vars.REPOSITORY }}           
        run: |
           sudo wget https://github.com/mikefarah/yq/releases/download/v4.9.8/yq_linux_amd64 -O /usr/bin/yq
           sudo chmod +x /usr/bin/yq      
           kubectl apply -f "${{ inputs.deploy_path }}/deploy-mongo.yml"
            yq eval ".spec.template.spec.containers[0].image = \"$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG\"" -i "${{ inputs.deploy_path }}/deploy.yml"
           cat "${{ inputs.deploy_path }}/deploy.yml"
           kubectl apply -f "${{ inputs.deploy_path }}/deploy.yml"
